<?xml version="1.0"?>
<project xmlns:jacoco="antlib:org.jacoco.ant" name="Exam_Prototype" default="test" basedir=".">
  <property name="javalib.dir" value="lib" />
  <property name="tomcatlib.dir" value="${javalib.dir}/tomcatLib" />
  <property name="hibernatelib.dir" value="${javalib.dir}/hibernate" />
  <property name="struts2.dir" value="${javalib.dir}/struts2" />
  <property name="web.dir" value="WebContent"/>
  <property name="main.build.dir" value="src" />
  <property name="main.src.dir" value="src" />
  <property name="test.build.dir" value="tests" />
  <property name="test.results.dir" value="${test.build.dir}/results" />
  <property name="test.src.dir" value="tests" />
  <property name="result.report.dir" location="${test.results.dir}/coverage"/>
  <property name="result.exec.file" location="${result.report.dir}/jacoco.exec"/>

  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
    <classpath path="lib/jacocoant.jar"/>
  </taskdef>

  <path id="classpath.test">
    <fileset dir="${javalib.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${hibernatelib.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${struts2.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${tomcatlib.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${web.dir}/WEB-INF/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${main.build.dir}"/>
  </path>



  <target name="test" depends="run, reportJUnit, reportJacoco, clean" />

  <target name="compile">
    <mkdir dir="${main.build.dir}"/>
    <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
      <classpath refid="classpath.test"/>
    </javac>
  </target>

  <target name="build" depends="compile">
    <mkdir dir="${test.build.dir}" />
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
    <echo message="Build done" />
  </target>

  <!-- Test and build all files  -->
  <!-- To run this: use "ant" (default) or "ant run" -->
  <target name="run" depends="build">
    <mkdir dir="${test.results.dir}" />
    <jacoco:coverage destfile="${result.exec.file}">
      <junit fork="true" includeAntRuntime="true" printsummary="on" haltonfailure="no" failureproperty="test.failed">
          <formatter type="plain" usefile="false"/>
          <formatter type="xml" />
          <batchtest todir="${test.results.dir}">
              <fileset dir="${test.src.dir}" includes="**/*Test*.java" />
          </batchtest>
          <classpath>
            <path refid="classpath.test" />
            <pathelement location="${test.build.dir}"/>
          </classpath>
      </junit>
    </jacoco:coverage>
  </target>

  <target name="reportJUnit">
    <echo message="Ahora procesamos los resultados" />
    <junitreport todir="${test.results.dir}">
      <fileset dir="${test.results.dir}">
       <include name="TEST-*.xml" />
      </fileset>
      <report todir="${test.results.dir}" />
    </junitreport>
  </target>

  <target name="reportJacoco">
  <!--  Step 3: Create coverage report  -->
    <jacoco:report>
      <!--
       This task needs the collected execution data and ...
      -->
      <executiondata>
        <file file="${result.exec.file}"/>
      </executiondata>
      <!--  the class files and optional source files ...  -->
      <structure name="Coverage">
      <classfiles>
        <fileset dir="${test.build.dir}"/>
        <fileset dir="${main.build.dir}"/>
      </classfiles>
      <sourcefiles encoding="UTF-8">
        <fileset dir="${test.src.dir}"/>
        <fileset dir="${main.src.dir}"/>
      </sourcefiles>
      </structure>
      <!--  to produce reports in different formats.  -->
      <html destdir="${result.report.dir}"/>
      <csv destfile="${result.report.dir}/report.csv"/>
      <xml destfile="${result.report.dir}/report.xml"/>
    </jacoco:report>
    <echo message="Generados reports de coverage" />
  </target>

  <!-- delete all class files -->
  <!-- To run this: use "ant clean" -->
  <target name="clean">
    <delete>
        <fileset dir="${basedir}" includes="**/*.class" />
    </delete>
    <echo message="clean done" />
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>
</project>
